
__attribute__((noreturn))
void run_command(char *buf, int nbuf, int *pcp) {
    /* Useful data structures and flags. */
    char *arguments[10];
    int numargs = 0;
    /* Word start/end */
    int ws = 1;
    int we = 0;

    int redirection_left = 0;
    int redirection_right = 0;
    char *file_name_l = 0;
    char *file_name_r = 0;

    int pipe_cmd = 0;
    int p[2];

    int sequence_cmd = 0;

    int i = 0;

    printf("Debug: command recieved: %s \n", buf); 
    /* Parse the command character by character. */
    for (; i < nbuf; i++) {
        char c = buf[i];
        /* Parse the current character and set-up various flags:
           sequence_cmd, redirection, pipe_cmd and similar.*/ 
        /* ##### Place your code here. */
        if(c == '\0' || c == '\n'){
          if (!ws) {
            buf[i] = '\0';
            arguments[numargs++] = &buf[we];
           }
          break;
        }
        if (!(redirection_left || redirection_right)) {
            /* No redirection, continue parsing command. */
              switch (c) {
                case ';':
                    buf[i] = '\0';
                    sequence_cmd = 1;
                    break;

                case '|':
                    pipe_cmd = 1;
                    //buf[i] = '\0';
                    break;

                case '<':
                    redirection_left = 1;
                    buf[i] = '\0';
                    file_name_l = &buf[i + 1];
                    break;

                case '>':
                    redirection_right = 1;
                    buf[i] = '\0';
                    file_name_r = &buf[i + 1];
                    break;

                case '\0':
                    if (!ws) {
                        buf[i] = '\0';
                        arguments[numargs++] = &buf[we];
                    }
                    break;

                default:
                    if (c != ' ' && c != '\t' && c != '\n') {
                        if (ws) {
                            ws = 0;
                            we = i;
                        }
                    } else {
                        if (!ws) {
                            buf[i] = '\0';
                            arguments[numargs++] = &buf[we];
                            ws = 1;
                        }
                    }
                    break;
            }
} else {
            /* Redirection command. Capture the file names. */
            if (c == '<') {
                fprintf(1, "Detected left redirection\n");
                redirection_left = 1;
                buf[i] = '\0';
                file_name_l = &buf[i + 1];
            } else if (c == '>') {
                fprintf(1, "Detected right redirection\n");
                redirection_right = 1;
                buf[i] = '\0';
                file_name_r = &buf[i + 1];
            }
	}
    }
   if(numargs > 0){
      for(int k=0; k < numargs; k++){
        fprintf(1, "Arg[%d]: %s\n", k, arguments[k]);
      }
    }else{
	fprintf(1, "No Args\n");
    }

       if (pipe_cmd) {
            // ##### Place your code here.

            while (i < nbuf && buf[i] == ' ')i++;
            char *right_cmd = buf + i;
            numargs = 0;

            for (int j = 0; right_cmd[j] != '\0'; j++){
              if(right_cmd[j] != ' ' && ws){
                arguments[numargs++] = right_cmd + j;
                ws = 0;
              } else if(right_cmd[j] == ' ' || right_cmd[j] == '\0'){
                  ws = 1;
                  right_cmd[j] = '\0';
                }
            }

            //printf("Debug: left command: %s\n", arguments[0]);
            printf("Debug: right command: %s\n", right_cmd);
            for(int j = 0; j < numargs; j++){
              printf("Arguments[%d]: %s\n", j, arguments[j]);
            }}


    /*
      Sequence command. Continue this command in a new process.
      Wait for it to complete and execute the command following ';'.
    */
if (sequence_cmd) {
        sequence_cmd = 0;
        if (fork() != 0) {
            wait(0);
            // ##### Place your code here.

            // Possibly handle the next command after the ';' here
            run_command(&buf[i + 1], nbuf - i - 1, pcp);
        } else {
            arguments[numargs] = 0;
            exec(arguments[0], arguments);
            fprintf(2, "Sequence command execution failed\n");
            exit(1);
        }
    }
    /*
      If this is a redirection command,
      tie the specified files to std in/out.
    */


    if (redirection_left) {
        // ##### Place your code here.
        int fd = open(file_name_l, O_RDONLY);
        if (fd < 0) {
            fprintf(2, "Error opening input file: %s\n", file_name_l);
            exit(1);
        }
	close(0); // Close stdin
        dup(fd);  // Redirect stdin to the file
        close(fd); // Close original file descriptor
    }

    if (redirection_right) {
        // ##### Place your code here.
        int fd = open(file_name_r, O_WRONLY | O_CREATE);
        if (fd < 0) {
            fprintf(2, "Error opening output file: %s\n", file_name_r);
            exit(1);
        }
	close(1); // Close stdout
        dup(fd);  // Redirect stdout to the file
        close(fd); // Close original file descriptor
    }

    /* Parsing done. Execute the command. */
    
   /* if this command is a CD command, write arguments to the pcp pipe
   and exit with '2' to tell the parent process about this*/


    if (numargs> 0 && strcmp(arguments[0], "cd") == 0) {
        if(numargs < 2){
          fprintf(2, "cd: no such file or directory\n");
         }else{
            write(pcp[1], arguments[1], strlen(arguments[1]) + 1);
            fprintf(1, "changed dir to : %s\n", arguments[1]);
        }

         exit(2);
} else {
        /*
          Pipe command: fork twice. Execute the left hand side directly.
          Call run_command recursion for the right side of the pipe.
        */
	if(numargs > 0){
          for(int k=0; k < numargs; k++){
            fprintf(1, "Arg[%d]: %s\n", k, arguments[k]);
            }
	}else{
          fprintf(1, "1 No Args\n");
        }

	printf("Debug: pipe = %d;  \n", pipe_cmd); 

        if (pipe_cmd) {
            // ##### Place your code here
            pipe(p);
            int pid = getpid();

            printf("Debug (pid %d): Pipe setup complete. Left command: %s\n", pid, arguments[0]); 

            if (fork() == 0) {
//              fprintf(1, "left arg: %s\n", arguments[0]);
                close(p[0]);
                close(1); 
                dup(p[1]); 
               // close(p[1]);

               	printf("Debug (Child 1, pid %d): Executing left command: %s\n", getpid(), arguments[0]); 
                for (int j = 0; j < numargs; j++){
                  printf("Debug (Child 1, pid %d): Argument[%d]: %s\n", getpid(), j, arguments[j]);
                }
                //arguments[numargs] = 0;
                exec(arguments[0], arguments);
                fprintf(2, "exec %s failed\n", arguments[0]);
                exit(1);
            }
            /*char *right_cmd = buf + i + 1;
            while (*right_cmd == ' '){
              right_cmd++;
            }*/
            printf("Debug (Parent, pid %d): Parsed right command: %s\n", getpid(), right_cmd);
            if (fork() == 0) {
                //fprintf(1, "right arg: %s\n", &buf[i + 1]);
                close(p[1]);
                close(0);
                dup(p[0]);
                close(p[0]);

              	//exec(arguments[2], arguments);
                printf("Debug (Child 2, pid %d) Running right command segment: %s\n", getpid(), right_cmd); 

                run_command(right_cmd,nbuf - (right_cmd - buf), pcp);



            }

            close(p[0]);
            close(p[1]);

            wait(0);
            wait(0);

       } else {
            // ##### Place your code here.
            int pid = fork();
            if (pid == 0){
              printf("Debug (No pipe, pid %d): Executing command directly: %s\n", getpid(), arguments[0]);
              for (int j = 0; j < numargs; j++){
                printf("Debug (No pipe, pid %d): Argument[%d]: %s\n", getpid(), j, arguments[j]);
              }
              arguments[numargs] = 0;
              exec(arguments[0], arguments);
              fprintf(2, "exec %s failed\n", arguments[0]);
              exit(1);
        }   else{
              wait(0);
           } 
	}
    }
    exit(0);
}

